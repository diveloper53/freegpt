<?php

define('FREEGPT_BASE_URL', 'https://chatgptdemo.info/chat/');

define('FREEGPT_NEW_CHAT_URL', FREEGPT_BASE_URL . 'new_chat');
define('FREEGPT_GET_CHAT_URL', FREEGPT_BASE_URL . 'get_chat');
define('FREEGPT_UPDATE_CHAT_NAME_URL', FREEGPT_BASE_URL . 'update_chat_name');
define('FREEGPT_DELETE_CHAT_URL', FREEGPT_BASE_URL . 'delete_chat');
define('FREEGPT_GET_USER_CHAT_URL', FREEGPT_BASE_URL . 'get_user_chat');
define('FREEGPT_UPDATE_MESSAGES_URL', FREEGPT_BASE_URL . 'update_messages');
define('FREEGPT_UPDATE_SHARE_CHAT_URL', FREEGPT_BASE_URL . 'update_share_chat');
define('FREEGPT_CHAT_API_STREAM_URL', FREEGPT_BASE_URL . 'chat_api_stream');

class freegpt {
    public static $user_id = null;
    public static $chat_id = null;

    /**
     * Initialize a new instance of the freegpt class.
     *
     * The `user_id` and `chat_id` parameters are optional. If they are not
     * provided, they are created automatically.
     *
     * @param string|null $user_id The user ID. If not provided, it is created
     *     automatically using {@link create_user_id()}.
     * @param string|null $chat_id The chat ID. If not provided, it is created
     *     automatically using {@link create_chat_id()} with the given or
     *     created `user_id`.
     */
    function __construct($user_id = null, $chat_id = null) {
        self::$user_id = isset($user_id) ? $user_id : self::create_user_id();
        self::$chat_id = isset($chat_id) ? $chat_id : self::create_chat_id(self::$user_id);
    }

    /**
     * Generate a new user ID.
     *
     * The user ID is read from the hidden element with the id 'USERID' from the
     * HTML at {@link https://chatgptdemo.info/chat/}.
     *
     * @return string The user ID.
     */
    public static function create_user_id() {
        $html = file_get_contents(FREEGPT_BASE_URL);
        $dom = new DOMDocument();
        $dom->loadHTML($html);
        return $dom->getElementById('USERID')->textContent;
    }

    /**
     * Generate a new chat ID.
     *
     * The chat ID is generated by sending a POST request to
     * {@link https://chatgptdemo.info/new_chat/} with the given `user_id` as a
     * field.
     *
     * @param string $user_id The user ID.
     * @return string The chat ID.
     */
    public static function create_chat_id($user_id) {
        $data = self::make_post_request(FREEGPT_NEW_CHAT_URL, [
            'user_id' => $user_id,
        ]);

        if ($data == false) {
            return null;
        }

        $data = json_decode($data, true);
        return $data['id_'];
    }

    public static function askGPT($question, $user_id=null, $chat_id=null) {
        $user_id = isset($user_id) ? $user_id : self::$user_id;
        $chat_id = isset($chat_id) ? $chat_id : self::$chat_id;

        $data = self::make_post_request(FREEGPT_CHAT_API_STREAM_URL, [
            'chat_id' => $chat_id,
            'question' => $question,
            'timestamp' => time(),
        ]);

        if($data == false) {
            return null;
        }

        $answer = "";
        $chunks = explode("\n\n", $data);
        var_dump($chunks);
        foreach ($chunks as $chunk) {
            $data = json_decode(substr($chunk, 6), true);
            var_dump($data);
            if (isset($data['choises']['delta']['content'])) {
                $answer .= $data['choises']['delta']['content'];
            }
        }

        return $answer;
    }

    /**
     * Make a POST request to the given URL with the given data.
     *
     * @param string $url The URL to make the POST request to.
     * @param array $data The data to send in the POST request.
     * @return string|false The response from the server, or false on failure.
     */
    private static function make_post_request($url, $data) {
        $options = [
            'http' => [
                'header' => "Content-Type: application/json\r\n",
                'method' => 'POST',
                'content' => json_encode($data),
            ],
        ];

        $context = stream_context_create($options);
        $result = file_get_contents($url, false, $context);

        return $result;
    }
}

$freegpt = new freegpt();
var_dump($freegpt->askGPT("Hello, World!"));
